// Mocks generated by Mockito 5.4.4 from annotations
// in maidscc_todos/test/todo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:maidscc_todos/core/network/clients/api_client.dart' as _i2;
import 'package:maidscc_todos/core/utils/shared_pref.dart' as _i4;
import 'package:maidscc_todos/features/authentication/data/entities/user_info/user_info_model.dart'
    as _i5;
import 'package:maidscc_todos/features/todos/data/data_source/local/todos_local_data_source.dart'
    as _i8;
import 'package:maidscc_todos/features/todos/data/data_source/remote/todos_remote_data_source.dart'
    as _i6;
import 'package:maidscc_todos/features/todos/data/entities/todo_list/todo_list_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiClient_0 extends _i1.SmartFake implements _i2.ApiClient {
  _FakeApiClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoListModel_1 extends _i1.SmartFake implements _i3.TodoListModel {
  _FakeTodoListModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_2 extends _i1.SmartFake implements _i3.TodoModel {
  _FakeTodoModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferencesStorage_3 extends _i1.SmartFake
    implements _i4.SharedPreferencesStorage {
  _FakeSharedPreferencesStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInfoModel_4 extends _i1.SmartFake implements _i5.UserInfoModel {
  _FakeUserInfoModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosRemoteDataSource extends _i1.Mock
    implements _i6.TodosRemoteDataSource {
  @override
  _i2.ApiClient get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _FakeApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
        returnValueForMissingStub: _FakeApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
      ) as _i2.ApiClient);

  @override
  _i7.Future<_i3.TodoListModel> todoList({
    int? limit = 0,
    int? skip = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #todoList,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i7.Future<_i3.TodoListModel>.value(_FakeTodoListModel_1(
          this,
          Invocation.method(
            #todoList,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoListModel>.value(_FakeTodoListModel_1(
          this,
          Invocation.method(
            #todoList,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i7.Future<_i3.TodoListModel>);

  @override
  _i7.Future<_i3.TodoModel> todoDetails({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #todoDetails,
          [],
          {#id: id},
        ),
        returnValue: _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #todoDetails,
            [],
            {#id: id},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #todoDetails,
            [],
            {#id: id},
          ),
        )),
      ) as _i7.Future<_i3.TodoModel>);

  @override
  _i7.Future<_i3.TodoListModel> userTodoList({
    required int? userId,
    int? limit = 0,
    int? skip = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userTodoList,
          [],
          {
            #userId: userId,
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i7.Future<_i3.TodoListModel>.value(_FakeTodoListModel_1(
          this,
          Invocation.method(
            #userTodoList,
            [],
            {
              #userId: userId,
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoListModel>.value(_FakeTodoListModel_1(
          this,
          Invocation.method(
            #userTodoList,
            [],
            {
              #userId: userId,
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i7.Future<_i3.TodoListModel>);

  @override
  _i7.Future<_i3.TodoModel> addTodo({
    required String? todo,
    required int? userId,
    required bool? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [],
          {
            #todo: todo,
            #userId: userId,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #addTodo,
            [],
            {
              #todo: todo,
              #userId: userId,
              #isCompleted: isCompleted,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #addTodo,
            [],
            {
              #todo: todo,
              #userId: userId,
              #isCompleted: isCompleted,
            },
          ),
        )),
      ) as _i7.Future<_i3.TodoModel>);

  @override
  _i7.Future<_i3.TodoModel> updateTodo({
    required int? todoId,
    required String? todo,
    required bool? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {
            #todoId: todoId,
            #todo: todo,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #updateTodo,
            [],
            {
              #todoId: todoId,
              #todo: todo,
              #isCompleted: isCompleted,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #updateTodo,
            [],
            {
              #todoId: todoId,
              #todo: todo,
              #isCompleted: isCompleted,
            },
          ),
        )),
      ) as _i7.Future<_i3.TodoModel>);

  @override
  _i7.Future<_i3.TodoModel> deleteTodo({required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #deleteTodo,
            [],
            {#todoId: todoId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.TodoModel>.value(_FakeTodoModel_2(
          this,
          Invocation.method(
            #deleteTodo,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i3.TodoModel>);
}

/// A class which mocks [TodosLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosLocalDataSource extends _i1.Mock
    implements _i8.TodosLocalDataSource {
  @override
  _i4.SharedPreferencesStorage get localClient => (super.noSuchMethod(
        Invocation.getter(#localClient),
        returnValue: _FakeSharedPreferencesStorage_3(
          this,
          Invocation.getter(#localClient),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesStorage_3(
          this,
          Invocation.getter(#localClient),
        ),
      ) as _i4.SharedPreferencesStorage);

  @override
  _i5.UserInfoModel get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _FakeUserInfoModel_4(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _FakeUserInfoModel_4(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as _i5.UserInfoModel);
}
