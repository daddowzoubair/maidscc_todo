// Mocks generated by Mockito 5.4.4 from annotations
// in maidscc_todos/test/authentication_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:maidscc_todos/core/network/clients/api_client.dart' as _i2;
import 'package:maidscc_todos/core/utils/shared_pref.dart' as _i5;
import 'package:maidscc_todos/features/authentication/data/data_sources/local/authentication_local_data_source.dart'
    as _i8;
import 'package:maidscc_todos/features/authentication/data/data_sources/remote/authentication_remote_data_source.dart'
    as _i6;
import 'package:maidscc_todos/features/authentication/data/entities/login/login_model.dart'
    as _i3;
import 'package:maidscc_todos/features/authentication/data/entities/user_info/user_info_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiClient_0 extends _i1.SmartFake implements _i2.ApiClient {
  _FakeApiClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginModel_1 extends _i1.SmartFake implements _i3.LoginModel {
  _FakeLoginModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInfoModel_2 extends _i1.SmartFake implements _i4.UserInfoModel {
  _FakeUserInfoModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferencesStorage_3 extends _i1.SmartFake
    implements _i5.SharedPreferencesStorage {
  _FakeSharedPreferencesStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRemoteDataSource extends _i1.Mock
    implements _i6.AuthenticationRemoteDataSource {
  @override
  _i2.ApiClient get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _FakeApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
        returnValueForMissingStub: _FakeApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
      ) as _i2.ApiClient);

  @override
  _i7.Future<_i3.LoginModel> login({
    required String? userName,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #userName: userName,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i3.LoginModel>.value(_FakeLoginModel_1(
          this,
          Invocation.method(
            #login,
            [],
            {
              #userName: userName,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.LoginModel>.value(_FakeLoginModel_1(
          this,
          Invocation.method(
            #login,
            [],
            {
              #userName: userName,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i3.LoginModel>);

  @override
  _i7.Future<_i4.UserInfoModel> userInfo() => (super.noSuchMethod(
        Invocation.method(
          #userInfo,
          [],
        ),
        returnValue: _i7.Future<_i4.UserInfoModel>.value(_FakeUserInfoModel_2(
          this,
          Invocation.method(
            #userInfo,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.UserInfoModel>.value(_FakeUserInfoModel_2(
          this,
          Invocation.method(
            #userInfo,
            [],
          ),
        )),
      ) as _i7.Future<_i4.UserInfoModel>);

  @override
  _i7.Future<_i3.LoginModel> refreshToken({required String? refreshToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
          {#refreshToken: refreshToken},
        ),
        returnValue: _i7.Future<_i3.LoginModel>.value(_FakeLoginModel_1(
          this,
          Invocation.method(
            #refreshToken,
            [],
            {#refreshToken: refreshToken},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.LoginModel>.value(_FakeLoginModel_1(
          this,
          Invocation.method(
            #refreshToken,
            [],
            {#refreshToken: refreshToken},
          ),
        )),
      ) as _i7.Future<_i3.LoginModel>);
}

/// A class which mocks [AuthenticationLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationLocalDataSource extends _i1.Mock
    implements _i8.AuthenticationLocalDataSource {
  @override
  _i5.SharedPreferencesStorage get localClient => (super.noSuchMethod(
        Invocation.getter(#localClient),
        returnValue: _FakeSharedPreferencesStorage_3(
          this,
          Invocation.getter(#localClient),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesStorage_3(
          this,
          Invocation.getter(#localClient),
        ),
      ) as _i5.SharedPreferencesStorage);

  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as String);

  @override
  String get refreshToken => (super.noSuchMethod(
        Invocation.getter(#refreshToken),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#refreshToken),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#refreshToken),
        ),
      ) as String);

  @override
  _i4.UserInfoModel get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _FakeUserInfoModel_2(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _FakeUserInfoModel_2(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as _i4.UserInfoModel);

  @override
  _i7.Future<bool> setAccessToken(String? accessToken) => (super.noSuchMethod(
        Invocation.method(
          #setAccessToken,
          [accessToken],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setRefreshToken(String? refreshToken) => (super.noSuchMethod(
        Invocation.method(
          #setRefreshToken,
          [refreshToken],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setUserInfo(_i4.UserInfoModel? userInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserInfo,
          [userInfo],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
